package com.geotracksolutionsint.forcesos;


import ca.weblite.codename1.json.JSONArray;
import ca.weblite.codename1.json.JSONObject;
import com.codename1.components.Accordion;
import com.codename1.components.InteractionDialog;
import com.codename1.components.MultiButton;
import com.codename1.components.ToastBar;
import com.codename1.googlemaps.MapContainer;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.io.Log;
import com.codename1.io.NetworkManager;
import com.codename1.io.Util;
import com.codename1.location.LocationManager;
import com.codename1.maps.Coord;
import com.codename1.ui.Button;
import com.codename1.ui.CN;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Container;
import com.codename1.ui.Dialog;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.FontImage;
import com.codename1.ui.Form;
import com.codename1.ui.Image;
import com.codename1.ui.Label;
import com.codename1.ui.TextArea;
import com.codename1.ui.TextField;
import com.codename1.ui.Toolbar;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.plaf.RoundRectBorder;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.util.Callback;
import com.codename1.util.StringUtil;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose of building native mobile applications using Java.
 */
public class ForceSOS {

    private Form current;
    private Resources theme;
    //--------------------------------------------------------
    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

    }
    //--------------------------------------------------------
    public void start() {
        Log.p("start()", Log.DEBUG);
        if (current != null) {
            Log.p("start()->"+current.getName(), Log.DEBUG);
            current.show();
            return;
        }
        textHintInTextAreaComponent();
    }
    //--------------------------------------------------------
    public void stop() {
        Log.p("stop()", Log.DEBUG);
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }
    //--------------------------------------------------------
    public void destroy() {
        Log.p("destroy()", Log.DEBUG);
    }

         Form hi = new Form("issueLongClickInButton", new BorderLayout());
         hi.setName("formRequestPermission");
         hi.setUIID("MyForm");
         hi.setSafeArea(true);
         hi.setFormBottomPaddingEditingMode(true);
         hi.setScrollableY(false);
         
        Button rp = new Button("SOS","ecs_btnSos2");
        rp.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent evt) {
                
                 
             }
         });
        rp.addLongPressListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent evt) {
                  if(Dialog.show("Permission required", "do you want to enable?", "YES", "NOT")){
                     hi.showBack();
                 }else
                     hi.showBack();
             }
         });
        hi.add(BorderLayout.CENTER, FlowLayout.encloseCenterMiddle(rp));
        hi.show();
         
    }
   //-----------------------------------------------------------
   //Issue: 220222
   //https://github.com/codenameone/CodenameOne/issues/3558
   //-----------------------------------------------------------
   private void textHintInTextAreaComponent() {

       Form test = new Form("TestHintIssue", new BorderLayout());
       test.setFormBottomPaddingEditingMode(true);

       test.getToolbar().setTitle("issue text hint");

       TextField tf = new TextField("", "Write a reference", 20, TextArea.ANY);
       tf.setUIID("ta");
       tf.getHintLabel().setUIID("hint");
       tf.setMaxSize(200);
       tf.setGrowByContent(false);
       tf.setSingleLineTextArea(false);
       tf.setScrollVisible(false);
       tf.setRows(2);

       Button btn = new Button("CONTINUE");
       Container cnt  = new Container(BoxLayout.y());
       cnt.add(tf);
       cnt.add(btn);

       test.add(BorderLayout.SOUTH, cnt);
       test.setSafeArea(true);
       test.show();

    }
   //-----------------------------------------------------------
}//Enclass